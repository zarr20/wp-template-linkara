/*!
* zar-core - Utility Core Library
* Version: 1.0.0
* Author: Dzarr al ghifari
* License: MIT
* Copyright 2024 Hijrstudio
*/
var zarcore=function(){"use strict";const e="resources";function o(){return new Promise(((o,r)=>{const t=indexedDB.open("resourceCache",1);t.onupgradeneeded=o=>{const r=o.target.result;r.objectStoreNames.contains(e)||r.createObjectStore(e,{keyPath:"url"})},t.onsuccess=e=>o(e.target.result),t.onerror=e=>r(e.target.error)}))}function r(r,t){return fetch(t).then((e=>{if(!e.ok)throw new Error(`Failed to fetch ${r.toUpperCase()}: ${t}`);return e.text()})).then((r=>(function(r,t){o().then((o=>new Promise(((n,c)=>{const s=o.transaction(e,"readwrite").objectStore(e).put({url:r,data:t});s.onsuccess=()=>n(),s.onerror=()=>c(s.error)}))))}(t,r),r)))}function t(e,o,r){return new Promise((t=>{const n=document.createElement("css"===e?"style":"script");"css"===e?n.textContent=r:(n.textContent=r,n.async=!0),document.head.appendChild(n),console.log(`${e.toUpperCase()} appended: ${o}`),t()}))}function n(n,c){return function(r){return o().then((o=>new Promise(((t,n)=>{const c=o.transaction(e,"readonly").objectStore(e).get(r);c.onsuccess=()=>t(c.result?.data||null),c.onerror=()=>n(c.error)}))))}(c).then((e=>e?(console.log(`${n.toUpperCase()} loaded from cache: ${c}`),t(n,c,e)):(console.log(`${n.toUpperCase()} loading from network: ${c}`),r(n,c).then((e=>t(n,c,e)))))).catch((e=>{console.error(`Error loading ${n.toUpperCase()} resource:`,e)}))}return{LazyLoader:function(e={}){const o=".lazyload",r="images";let t=null;function n(e){e.forEach((e=>{const n=e.target;e.isIntersecting?(!async function(e){const t=e.dataset.src;if(!t)return;try{const a=await(n=t,s().then((e=>new Promise(((o,t)=>{const c=e.transaction(r,"readonly").objectStore(r).get(n);c.onsuccess=()=>o(c.result),c.onerror=()=>t(c.error)})))));if(a)e.src=URL.createObjectURL(a);else{const o=await fetch(t);if(!o.ok)throw new Error("Failed to fetch image");const n=await o.blob();e.src=t,function(e,o){s().then((t=>{t.transaction(r,"readwrite").objectStore(r).put(o,e)})).catch((e=>{console.error("Failed to save image to IndexedDB:",e)}))}(t,n)}e.classList.add("lazyload-loaded"),e.classList.remove(o.replace(".","")),c(e)}catch(e){console.error("Image fetch or caching failed:",e)}var n}(n),t.unobserve(n)):c(n)}))}function c(e){const o=e.closest(".lazy-image-container");if(o){const e=o.querySelector(".loader-container");e&&(e.style.display="none")}else console.warn("No .lazy-image-container found for image",e)}function s(){return new Promise(((e,o)=>{const t=indexedDB.open("imageCacheDB",1);t.onupgradeneeded=e=>{const o=e.target.result;o.objectStoreNames.contains(r)||o.createObjectStore(r)},t.onsuccess=()=>e(t.result),t.onerror=()=>o(t.error)}))}return{init:function(){const r=document.querySelectorAll(`img${o}`),c={root:e.root||null,rootMargin:e.rootMargin||"0px",threshold:e.threshold||.1};t=new IntersectionObserver(n,c),r.forEach((e=>t.observe(e)))}}},loadResources:function(e=[],o=[],r=()=>{}){const t=e.map((e=>n("css",e))),c=o.map((e=>n("js",e)));Promise.all([...t,...c]).then((()=>{console.log("All resources loaded and cached."),r()})).catch((e=>{console.error("Error loading resources:",e)}))}}}();
//# sourceMappingURL=zarcore.min.js.map
